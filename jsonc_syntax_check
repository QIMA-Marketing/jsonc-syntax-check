#!/usr/bin/env perl

use warnings;
use strict;

use Data::Dumper;
use File::Find::Rule;
use JSON::PP;

# This script loads *.jsonc files and ensures their validity by parsing and
# loading them.

# A file glob pattern is required as the first argument. If a second argument
# (a comma separated string of filenames) is sent in, we'll operate only on
# those files. Otherwise, we'll find all files that match the file glob pattern.

# On success, we exit with 0. On fail, we print the list of *.jsonc files that
# can't be compiled, and exit with a status of -1.

my ($pattern, $files) = @ARGV;

my $dir = $ENV{GITHUB_WORKSPACE};
my @file_list;

if (! $files) {
    @file_list = find_files($dir, $pattern);
}
else {
    @file_list = split /,/, $files;
}

my @compile_failed;
my $status = 0; # Start with success status

compile(\@file_list);

for (@compile_failed) {
    print "$_ failed a syntax check\n";
}

# Explicitly exit so Github Actions will know our status
exit $status;

sub compile {
    my ($files) = @_;

    for my $file (@$files) {
        # If files are sent in from another Action, they might have an
        # incorrect extension. Skip them

        if ($pattern =~ m|\.| && $pattern !~ m|\\|) {
            # We need to escape the dot for regex matching
            $pattern =~ s|\.|\\\.|g;
        }
        if ($pattern =~ m|\*| && $pattern !~ m|\.\*|) {
            # We need to have something for the quantifier to adhere to
            $pattern =~ s|\*|\.\*|g;
        }

        next if $file !~ m|${pattern}$|;

        my $open_success = open my $fh, '<', $file;

        if (! $open_success) {
            push @compile_failed, $file;
            $status = -1;
            next;
        }

        my $clean_json_data;

        while (my $line = <$fh>) {
            $clean_json_data .= strip_comments($line);
        }

        my $perl;

        my $decoded_ok = eval {
            $perl = decode_json($clean_json_data);
        };

        if (! $decoded_ok || ! ref $perl) {
            push @compile_failed, $file;
            $status = -1;
            next;
        }
    }
}
sub find_files {
    my ($dir, $pattern) = @_;

    my @files = File::Find::Rule
        ->file
        ->name($pattern)
        ->in($dir);

    return @files;
}
sub strip_comments{
    my ($line) = @_;

    my $prev_char = '';
    my $outside_quotes = 1;
    my $is_unescaped = 1;
    my $comment_start;

    my @chars = split(//, $line);
    my $len = @chars;
    my $i = 0;

    while ($i < $len) {
        my $c = $chars[$i];

        if ($is_unescaped){
            if ($c eq '\\'){
                $is_unescaped = 0;
            }
            elsif ($c eq '"') {
                $outside_quotes = !$outside_quotes;
            }
            elsif ($c eq '/'
                and $prev_char eq '/'
                and $outside_quotes) {
                $comment_start = $i-1;
                last;
            }
        }
        else {
            $is_unescaped = 1;
        }

        $prev_char = $c;
        $i++;
    }

    defined $comment_start
        and $line = substr($line, 0, $comment_start) . "\n";

    return $line;
}